version: 2.1

commands:
  create-dotenv-file:
    description: Create .env file for backend project
    steps:
      - run:
          name: Write env vars to .env
          command: |
            pwd
            echo ENVIRONMENT=$ENVIRONMENT >> ./backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./backend/.env
            cat ./backend/.env

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Print workflow ID to be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflowID >> --force
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflowID >>
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflowID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request GET https://api.memstash.io/values/DB_MIGRATION_STATUS_<< parameters.workflowID >>)
            echo $SUCCESS
            if(( $SUCCESS=="success" ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd ~/project/frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd ~/project/backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd ~/project/frontend
            npm audit --audit-level=critical > audit.log
            tail audit.log -n 200

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd ~/project/backend
            npm audit --audit-level=critical > audit.log
            tail audit.log -n 200

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-${CIRCLE_WORKFLOW_ID} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add backend IP to memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            curl -H "Content-Type: text/plain" -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(curl -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID})
            echo "$BACKEND_IP" >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["83:ad:4f:1f:1b:67:de:8e:61:c0:c7:89:24:8f:d3:4f"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - create-dotenv-file
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm run migrations > migrations_log.txt
            cat ./migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfull" ~/project/backend/migrations_log.txt;
            then
              echo "Successful"
              curl -H "Content-Type: text/plain" -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID}
            else
              echo "Failure"
              curl -H "Content-Type: text/plain" -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Configure dotenv file
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo ENVIRONMENT=production >> ~/project/frontend/.env
            echo "API_URL=${API_URL}" >> ~/project/frontend/.env
            cat ~/project/frontend/.env
      - run:
          name: Build frontend
          command: |
            cd ~/project/frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend artifacts to s3
          command: |
            aws s3 cp ~/project/frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["83:ad:4f:1f:1b:67:de:8e:61:c0:c7:89:24:8f:d3:4f"]
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - create-dotenv-file
      - run:
          name: Deploy backend
          command: |
            tar czf backend.tar.gz backend
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip install awscli
      - create-dotenv-file
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "$API_URL"
            curl -s "${API_URL}/api/status" -vvv
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-eu-central-1.amazonaws.com"
            curl -s $URL | grep "Welcome"
            #  - destroy-environment:
            #      workflowID: ${CIRCLE_WORKFLOW_ID}
            #  - revert-migrations:
            #      workflowID: ${CIRCLE_WORKFLOW_ID}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Save old workflow ID to memstash
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate \
              --output text)
            echo $OLD_WORKFLOW_ID
            curl -H "Content-Type: text/plain" -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request PUT --data "$OLD_WORKFLOW_ID" https://api.memstash.io/values/OLD_WORKFLOW_ID
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront-production" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(curl -H "token: 7eb3bef9-f1a7-44a1-9ff7-22631e3f0b0e" --request GET https://api.memstash.io/values/OLD_WORKFLOW_ID)
            export STACKS=[ ${CIRLCE_WORKFLOW_ID}, $OldWorkflowID ] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "frontend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "backend-${OLD_WORKFLOW_ID}"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
